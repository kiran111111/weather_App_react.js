{"version":3,"sources":["Weather.js","App.js","index.js"],"names":["Weather","props","fahToCel","temp","Math","round","bind","this","city","temperature","country","humidity","description","icon","error","console","log","className","src","React","Component","Form","document","querySelector","onWeather","onSubmit","e","type","name","placeholder","App","getWeather","preventDefault","currentTarget","elements","value","geocode_url","process","handleDisplayOn","fetch","then","data","json","lat","results","geometry","location","lon","lng","res","setState","main","weather","handleDisplayOff","err","undefined","state","bState","id","style","display","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aef0cc5e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default  class Weather extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.fahToCel = this.fahToCel.bind(this)\r\n  }\r\n\r\n\r\n fahToCel = temp =>{\r\n    return  Math.round(temp - 273.15);\r\n   }\r\n  \r\n  render(){\r\n    \r\n    const {city,\r\n    country,\r\n    temperature,\r\n    humidity,\r\n    description,\r\n    icon,\r\n    error} = this.props;\r\n\r\n    console.log(this.fahToCel(temperature))\r\n\r\n    // if(icon){\r\n    //   let iconEl = \"http://openweathermap.org/img/w/\" + icon + \".png\";\r\n    // }\r\n\r\n   return (\r\n   <>\r\n   <div className=\"weather__info\">\r\n      {icon && <img src={\"http://openweathermap.org/img/w/\" + icon + \".png\"} />}\r\n\r\n     {city && (\r\n          <p className=\"weather__key\">\r\n            City: <span className=\"weather__value\"> {city}</span>\r\n          </p>\r\n        )}\r\n\r\n     {temperature && (\r\n        <p className=\"weather__key\">\r\n          Temperature: <span className=\"weather__value\"> {this.fahToCel(temperature)}Â°C</span>\r\n        </p>\r\n      )}\r\n   \r\n    {humidity && (\r\n        <p className=\"weather__key\">\r\n          Humidity: <span className=\"weather__value\"> {humidity} ppm </span>\r\n        </p>\r\n      )}\r\n\r\n      {description && (\r\n        <p className=\"weather__key\">\r\n          Condition: <span className=\"weather__value\"> {description}</span>\r\n        </p>\r\n      )}\r\n\r\n      {error && <p className=\"weather__error\">{error}</p>}\r\n   \r\n   </div>\r\n   </>\r\n  );\r\n }\r\n}\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from \"./Weather\";\n// import Form from \"./Form\";\nimport './App.css';\n\n// variables\n// store the variables in an env file\nconst API_KEY = process.env.REACT_APP_API_KEY ;\nconst geocode_apiKey = process.env.REACT_APP_geocode_apiKey;\nconst CORS = \"https://cors-anywhere.herokuapp.com\";\nconst spinnerEl  = document.querySelector(\"spinner-wrapper\")\n\n// Form component\nconst Form = ({ onWeather }) => {\n  return (\n    <form onSubmit={e => onWeather(e)}>\n      <input className=\"form-input\" type=\"text\" name=\"city\" placeholder=\"City...\" />\n      <input className=\"form-input\" type=\"text\" name=\"country\" placeholder=\"Country...\" />\n      <button className=\"button\" type=\"submit\">Get Weather</button>\n    </form>\n  );\n};\n\n//main App \nexport default class App  extends React.Component{\n   constructor(props){\n     super(props);\n     this.state = {\n       temperature : '',\n       humidity:'',\n       city:'',\n       country : '',\n       description:'',\n       icon:\"\",\n       error :'Please enter values',\n       bState: 'none'\n     }\n   }\n\n   handleDisplayOn() {\n    this.setState({\n      bState: 'block'\n    })\n  }\n\n  handleDisplayOff() {\n    this.setState({\n      bState: 'none'\n    })\n  }\n  \n// function for gettin weather***\n  getWeather =(e) => {\n    e.preventDefault();\n    const city = e.currentTarget.elements.city.value;\n    const country = e.currentTarget.elements.country.value;\n// get the coordinates and then the weather--\n    if(city && country){\n    const geocode_url = `https://maps.googleapis.com/maps/api/geocode/json?address=${city}&key=${geocode_apiKey}`;\n    this.handleDisplayOn()\n     fetch(geocode_url)\n    .then(data=>{\n        const result = data.json();\n        return result;\n    })\n    .then(data=>{\n        let lat = data.results[0].geometry.location.lat;\n        let lon = data.results[0].geometry.location.lng;\n        console.log(lat)\n   //put the coordinate in the fucntion that gets the weather--\n        Weather(lat,lon)\n      })\n\n  //function for getting the weather from the coordinates---- \n    const Weather =  (lat,lon) =>{\n     try{\n        // this.handleDisplayOn()\n        fetch(`https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`)\n        .then(data =>{\n          const result = data.json();\n          return result;\n       })\n       .then(res=>{\n           this.setState({\n            city:res.name,\n            temperature : res.main.temp,\n            humidity : res.main.humidity,\n            description: res.weather[0].description,\n            icon : res.weather[0].icon,\n            error:\"\"\n          })\n          this.handleDisplayOff()\n         })\n    //set the state of the weather componet here \n     \n       }\n      catch(err){\n        if(err){\n          console.log(\"invalid values\")\n        }\n      }\n     }\n   //end of the try nd catch block--\n\n    }\n\n    else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"please enter a valid values.\"\n      });\n    }\n  }\n  \n\n\n  render(){\n    return (\n      <div className=\"wrapper \" id=\"container\">\n\n       <div className=\"spinner-wrapper \"  style={{display:this.state.bState}}>\n          <div className=\"spinner\">\n            <div className=\"line\"></div>\n            <div className=\"line\"></div>\n            <div className=\"line\"></div>\n            <div className=\"line\"></div>\n          </div>\n        </div>\n        \n\n        <div className=\"main\">\n          <h1 id=\"title\">Weather Finder</h1>\n           <div className=\"main__wrapper\">\n            <Form onWeather={this.getWeather} />\n            <Weather\n              temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              icon = {this.state.icon}\n              error={this.state.error}\n            /> \n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}